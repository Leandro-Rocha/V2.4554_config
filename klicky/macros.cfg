[gcode_macro PARK_PURGE]
gcode:  
  {% set bucket_start = printer["gcode_macro CLEAN_NOZZLE"].bucket_start %}
  {% set bucket_left_width = printer["gcode_macro CLEAN_NOZZLE"].bucket_left_width %}
  {% set bucket_right_width = printer["gcode_macro CLEAN_NOZZLE"].bucket_right_width %}
  {% set bucket_pos = printer["gcode_macro CLEAN_NOZZLE"].bucket_pos %}
  {% set bucket_gap = printer["gcode_macro CLEAN_NOZZLE"].bucket_gap %}
  {% set bucket_y = printer["gcode_macro CLEAN_NOZZLE"].bucket_y %}
  
  {% set brush_top = printer["gcode_macro CLEAN_NOZZLE"].brush_top %}
  {% set brush_front = printer["gcode_macro CLEAN_NOZZLE"].brush_front %}
  {% set brush_depth = printer["gcode_macro CLEAN_NOZZLE"].brush_depth %}

  {% set prep_spd_xy = printer["gcode_macro CLEAN_NOZZLE"].prep_spd_xy %}
  {% set prep_spd_z = printer["gcode_macro CLEAN_NOZZLE"].prep_spd_z %}
  {% set clearance_z = printer["gcode_macro CLEAN_NOZZLE"].clearance_z %}
  {% set location_bucket_rear = printer["gcode_macro CLEAN_NOZZLE"].location_bucket_rear %}

  SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE VARIABLE=bucket_pos VALUE={(range(2) | random)}

  ### Raise Z for travel.
  G1 Z{brush_top + clearance_z} F{prep_spd_z}
  
  G1 Y{bucket_y} F{prep_spd_xy}

  G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}
  

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}


[gcode_macro goodnight]
gcode:  
    SET_PIN PIN=chamberlight VALUE=0
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=rpi_fan TARGET=0

    SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=1
    SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=2 
    SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=0 INDEX=3

    M84
    STATUS_OFF


[gcode_macro pulse_chamber]
gcode:  
    {% for value in  range(0,101) %}
      SET_PIN PIN=chamberlight VALUE={value / 100}
    {% endfor %}

  
[gcode_macro CG32]
gcode:
    {% if printer.quad_gantry_level.applied %}
      SAVE_GCODE_STATE NAME=STATE_G32
      G28 Z
      RESTORE_GCODE_STATE NAME=STATE_G32
    {% else %}
      G32
    {% endif %}

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    
    G90
    G28
    QUAD_GANTRY_LEVEL

    RESTORE_GCODE_STATE NAME=STATE_G32
   
[gcode_macro PRINT_START]
gcode:
    {% set th = printer.toolhead %}
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}

    M140 S{BED_TEMP}
    M104 S{EXTRUDER_TEMP} T0
    
    CG32

    STATUS_HEATING

    M109 S{EXTRUDER_TEMP} T0
    CALIBRATE_Z
    PARK_PURGE

    M190 S{BED_TEMP}

    CLEAN_NOZZLE

    STATUS_PRINTING
    

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}

    SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament

    {% if unload|int == 1 %}
      ERCF_EJECT
    {% endif %}

    #BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

    STATUS_READY



[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
      {action_respond_info("Homming...")}
      G28
    {% else %}
      {action_respond_info("Already hommed...")}
    {% endif %}



######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro BED_CENTER]
gcode:
    SAVE_GCODE_STATE NAME=BED_CENTER
    G90
    G0 X150 Y150 F6000
    RESTORE_GCODE_STATE NAME=BED_CENTER
  

[gcode_macro BL_PIN_UP]
gcode:
  BLTOUCH_DEBUG COMMAND=pin_up

[gcode_macro BL_PIN_DOWN]
gcode:
  BLTOUCH_DEBUG COMMAND=pin_down

[gcode_macro BL_PIN_TOUCH]
gcode:
  BLTOUCH_DEBUG COMMAND=touch_mode

[gcode_macro BL_RESET]
gcode:
  BLTOUCH_DEBUG COMMAND=reset

[gcode_macro BL_QUERY_PROBE]
gcode:
  QUERY_PROBE



